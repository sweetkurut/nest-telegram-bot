import {
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';
import { AppService } from './app.service';
import { actionButtons } from './app.button';

const todos = [
  {
    id: 1,
    title: 'Go to walk',
    isCompleted: false,
  },
  {
    id: 2,
    title: 'Do homework',
    isCompleted: false,
  },
  {
    id: 3,
    title: 'Go to GYM üí™',
    isCompleted: true,
  },
];

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('Hi Friend ‚úåÔ∏è');
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
  async listTask(@Ctx() ctx: Context) {
    await ctx.reply(`–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á \n\n${todos.map((todo) => (todo.isCompleted ? '‚úÖ' : '‚ùå') + ' ' + todo.title + '\n\n').join(' ')}
    `);
  }
  @Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
  async doneTask(@Ctx() ctx: Context) {
    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ');
  }

  @On('text')
  async getIdtask(@Message('text') idTask: string, ctx: Context) {
    
  }
}
