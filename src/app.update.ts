import {
  Ctx,
  Hears,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { AppService } from './app.service';
import { actionButtons } from './app.button';
import { Context } from './context.interface';
import { showList } from './app.utils';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply('Hi Friend ‚úåÔ∏è');
    await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons());
  }

  @Hears('üìå –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
  async createTask(@Ctx() ctx: Context) {
    await ctx.reply('–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É');
    ctx.session.type = 'create';
  }

  @Hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
  async listTask(@Ctx() ctx: Context) {
    const todos = await this.appService.getAll();
    await ctx.reply(showList(todos));
  }

  @Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
  async doneTask(@Ctx() ctx: Context) {
    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ');
    ctx.session.type = 'done';
  }

  @Hears('üñãÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
  async editTask(@Ctx() ctx: Context) {
    ctx.session.type = 'edit';
    await ctx.deleteMessage();
    await ctx.replyWithHTML(
      '–ù–∞–ø–∏—à–∏—Ç–µ ID –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' +
        '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
    );
  }

  @Hears('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ')
  async deleteTask(@Ctx() ctx: Context) {
    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ');
    ctx.session.type = 'remove';
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) return;

    console.log('Received message:', message); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    let todos;

    try {
      if (ctx.session.type === 'create') {
        todos = await this.appService.createTask(message);
      } else if (ctx.session.type === 'done') {
        todos = await this.appService.doneTask(Number(message));
      } else if (ctx.session.type === 'edit') {
        const [taskId, taskName] = message.split(' | ');
        todos = await this.appService.editTask(Number(taskId), taskName);
      } else if (ctx.session.type === 'remove') {
        todos = await this.appService.deleteTask(Number(message));
      }

      if (!todos) {
        await ctx.deleteMessage();
        await ctx.reply('–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      } else {
        console.log('Todos after operation:', todos); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await ctx.reply(showList(todos));
      }
    } catch (error) {
      console.error('Error handling message:', error);
      await ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      );
    }

    ctx.session.type = undefined;
  }
}
